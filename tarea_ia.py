# -*- coding: utf-8 -*-
"""Tarea IA

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18Nxz-Dy_kTbJ5Ml1TxwZQ4plN0ZWoJSc
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import kagglehub
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error

# Descargar dataset
dataset_path = kagglehub.dataset_download("hasibalmuzdadid/global-air-pollution-dataset")
print("Path to dataset files:", dataset_path)

import os

dataset_path = "/root/.cache/kagglehub/datasets/hasibalmuzdadid/global-air-pollution-dataset/versions/2"
print(os.listdir(dataset_path))

# Cargar datos
data = pd.read_csv(f"{dataset_path}/global air pollution dataset.csv")

# Mostrar las primeras filas
display(data.head())

# Eliminar valores nulos
data = data.dropna()

# Seleccionar solo columnas numéricas
data = data.select_dtypes(include=[np.number])

# Matriz de correlación
correlation_matrix = data.corr()

# Mostrar matriz de correlación como tabla
display(correlation_matrix)

# Graficar el mapa de calor de correlaciones
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title("Matriz de Correlación")
plt.show()

# Seleccionar características relevantes
correlation_threshold = 0.3
relevant_features = correlation_matrix['PM2.5 AQI Value'][abs(correlation_matrix['PM2.5 AQI Value']) > correlation_threshold].index.tolist()
data_filtered = data[relevant_features]

# Mostrar las primeras filas de datos filtrados
display(data_filtered.head())

# Separar variables predictoras y objetivo
X = data_filtered.drop(columns=['PM2.5 AQI Value'])
y = data_filtered['PM2.5 AQI Value']

# División en conjunto de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalización de datos
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Entrenar modelo
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

# Predicción
y_pred = model.predict(X_test_scaled)

# Calcular error cuadrático medio
mse = mean_squared_error(y_test, y_pred)
print(f'Error cuadrático medio: {mse}')

# Graficar valores reales vs predichos
plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.xlabel("Valores Reales")
plt.ylabel("Valores Predichos")
plt.title("Valores Reales vs. Predichos")
plt.show()

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score
import kagglehub


dataset_path = kagglehub.dataset_download("hasibalmuzdadid/global-air-pollution-dataset")
file_path = dataset_path + "/global air pollution dataset.csv"


data = pd.read_csv(file_path)


data = data.select_dtypes(include=[np.number])


X = data.drop(columns=["AQI Value"])
y = data["AQI Value"]


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)


y_pred = model.predict(X_test)


mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"MAE: {mae}")
print(f"R² Score: {r2}")

from sklearn.preprocessing import StandardScaler
import joblib


scaler = StandardScaler()


import numpy as np
X_ficticio = np.random.rand(100, 3)
scaler.fit(X_ficticio)


joblib.dump(scaler, "scaler.bin")

from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler
import joblib
import numpy as np


X_ficticio = np.random.rand(100, 3)
y_ficticio = np.random.choice([0, 1], size=100)


scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_ficticio)


knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_scaled, y_ficticio)


joblib.dump(knn, "knn_model.bin")

print("Archivo 'knn_model.bin' creado exitosamente.")

joblib.dump(knn, "knn_model.bin")

joblib.dump(scaler, "scaler.bin")

import joblib


knn_model = joblib.load("knn_model.bin")


scaler = joblib.load("scaler.bin")

from google.colab import files


files.download('knn_model.bin')


files.download('scaler.bin')